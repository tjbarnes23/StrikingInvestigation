@page "/ABTest"
@using StrikingInvestigation.Models
@using StrikingInvestigation.Utilities

<div>
    <div style="margin-right: 10px; float: right">(@testSpec.BrowserWidth, @testSpec.BrowserHeight)</div>
    
    <h1 style="margin-left: 10px">A/B Test</h1>

    <p style="margin-left: 10px">Try to detect whether block A or block B below contains striking errors.</p>

    @if (aBTestsData == null)
    {
        <div class="spinner"></div>
    }
    else
    {
        <EditForm Model="@testSpec">
            <div style="display: inline-block;
                    margin-left: 10px">
                <div class="form-group">
                    <label>
                        Select Test
                    </label>

                    <CustomInputSelect Value="@testSpec.SelectedTest"
                                       ValueChanged="@( (int value) => TestChanged(value) )"
                                       ValueExpression="@( () => testSpec.SelectedTest )"
                                       class="form-control"
                                       disabled="@testSpec.ControlsDisabled">
                        <option value="-1">Select test...</option>
                        <option value="0">Practice</option>

                        @foreach (ABTestData aBTestData in aBTestsData)
                        {
                            <option value="@aBTestData.Id">Test @aBTestData.Id</option>
                        }
                    </CustomInputSelect>
                </div>
            </div>

            @if (testSpec.SelectedTest == 0)
            {
                <div style="display: inline-block;
                        margin-left: 10px">
                    <div class="form-group">
                        <label>
                            Stage
                        </label>

                        <CustomInputSelect Value="@testSpec.Stage"
                                           ValueChanged="@( (int value) => StageChanged(value) )"
                                           ValueExpression="@( () => testSpec.Stage )"
                                           class="form-control"
                                           disabled="@testSpec.ControlsDisabled">
                            @for (int i = 5; i <= 12; i++)
                            {
                                <option value="@i">@StageConv.StageStr(i)</option>
                            }
                        </CustomInputSelect>
                    </div>
                </div>

                <div style="display: inline-block;
                        margin-left: 10px">
                    <div class="form-group">
                        <label>
                            Tenor weight
                        </label>

                        <CustomInputSelect Value="@testSpec.TenorWeight"
                                           ValueChanged="@( (int value) => TenorWeightChanged(value) )"
                                           ValueExpression="@( () => testSpec.TenorWeight )"
                                           class="form-control"
                                           disabled="@testSpec.TenorWeightDisabled">
                            <option value="8">@TenorWeightConv.TenorWeightStr(8)</option>
                            <option value="23">@TenorWeightConv.TenorWeightStr(23)</option>
                        </CustomInputSelect>
                    </div>
                </div>

                <div style="display: inline-block;
                        margin-left: 10px">
                    <div class="form-group">
                        <label>
                            Type of error
                        </label>

                        <CustomInputSelect Value="@testSpec.ErrorType"
                                           ValueChanged="@( (int value) => ErrorTypeChanged(value) )"
                                           ValueExpression="@( () => testSpec.ErrorType )"
                                           class="form-control"
                                           disabled="@testSpec.ControlsDisabled">
                            @for (int i = 1; i <= 2; i++)
                            {
                                <option value="@i">@ErrorTypeConv.ErrorTypeStr(i)</option>
                            }
                        </CustomInputSelect>
                    </div>
                </div>

                <div style="display: inline-block;
                        margin-left: 10px">
                    <div class="form-group">
                        <label>
                            Error size
                        </label>

                        <CustomInputSelect Value="@testSpec.ErrorSize"
                                           ValueChanged="@( (int value) => ErrorSizeChanged(value) )"
                                           ValueExpression="@( () => testSpec.ErrorSize )"
                                           class="form-control"
                                           disabled="@testSpec.ControlsDisabled">
                            @for (int i = 75; i >= 10; i -= 5)
                            {
                                <option value="@i">@ErrorSizeConv.ErrorSizeStr(i)</option>
                            }
                        </CustomInputSelect>
                    </div>
                </div>

                <div style="display: inline-block;
                        margin-left: 10px">
                    <button class="btn btn-primary"
                            @onclick="Create"
                            disabled="@testSpec.ControlsDisabled">
                        Create A/B Test
                    </button>
                </div>

                @if (blowSetA != null && blowSetB != null)
                {
                    @if (testSpec.ResultEntered == true)
                    {
                        <div style="display: inline-block;
                                margin-left: 10px;
                                margin-top: 1px;
                                vertical-align: top">
                            <div class="form-group">
                                <label>
                                    Show bells
                                </label>
            
                                <div>
                                    <InputCheckbox Value="@testSpec.ShowGaps"
                                            ValueChanged="@( (bool value) => ShowGapsChanged(value) )"
                                            ValueExpression="@( () => testSpec.ShowGaps )"
                                            class="form-check-input"
                                            style="margin-left: 28px;
                                                    margin-top: 8px;
                                                    width: 22px;
                                                    height: 22px"
                                            disabled="@testSpec.ControlsDisabled" />
                                </div>
                            </div>
                        </div>
                    }

                    <div style="display: inline-block;
                            margin-left: 10px">
                        <div class="form-group">
                            <label>
                                Save test
                            </label>

                            <div>
                                <button class="btn btn-primary"
                                        @onclick="Save"
                                        disabled="@testSpec.ControlsDisabled">
                                    @testSpec.SaveLabel
                                </button>

                                @if (testSpec.SpinnerSaving == true)
                                {
                                    <div class="spinnerinline"
                                            style="display: inline-block;
                                            vertical-align: top;
                                            margin-left: 12px;
                                            margin-top: 7px;
                                            --borderwidth: 5px;
                                            --width: 24px;
                                            --height: 24px">
                                    </div>
                                }

                                @if (testSpec.Saved == true)
                                {
                                    <div style="display: inline-block;
                                            vertical-align: top;
                                            margin-left: 12px;
                                            margin-top: 7px">
                                        Saved
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
            
            }
            else if (testSpec.SelectedTest != -1)
            {
                <div style="display: inline-block;
                        margin-left: 10px">
                    <div class="form-group">
                        <label>
                            Stage
                        </label>

                        <div style="border: 1px solid #ced4da;
                                border-radius: 4px;
                                padding-left: 16px;
                                padding-right: 16px;
                                padding-top: 7px">
                            <label>
                                @StageConv.StageStr(testSpec.Stage)
                            </label>
                        </div>
                    </div>
                </div>

                <div style="display: inline-block;
                        margin-left: 10px">
                    <div class="form-group">
                        <label>
                            Tenor weight
                        </label>

                        <div style="border: 1px solid #ced4da;
                                border-radius: 4px;
                                padding-left: 16px;
                                padding-right: 16px;
                                padding-top: 7px">
                            <label>
                                @TenorWeightConv.TenorWeightStr(testSpec.TenorWeight)
                            </label>
                        </div>
                    </div>
                </div>

                <div style="display: inline-block;
                        margin-left: 10px">
                    <div class="form-group">
                        <label>
                            Type of error
                        </label>

                        <div style="border: 1px solid #ced4da;
                                border-radius: 4px;
                                padding-left: 16px;
                                padding-right: 16px;
                                padding-top: 7px">
                            <label>
                                @ErrorTypeConv.ErrorTypeStr(testSpec.ErrorType)
                            </label>
                        </div>
                    </div>
                </div>
            }
        </EditForm>
    }

    <div style="position: relative">
        @if (blowSetA != null && blowSetB != null)
        {
            foreach (Blow blow in blowSetA.Blows)
            {
                if (testSpec.ShowGaps == true)
                {
                    // Place labels if it's the first blow of the row
                    if (blow.Place == 1)
                    {
                        <RowStartLabel TestSpec="@testSpec"
                                Blow="@blow"
                                Screen="@screenA" />
                    }

                    <Bell TestSpec="@testSpec"
                            Blow="@blow"
                            Screen="@screenA"
                            Callback="ProcessCallback" />
                }

                <audio id="@blow.AudioId" preload="auto">
                    <source src="@blow.BellSound" type="audio/mpeg" />
                </audio>
            }

            if (testSpec.ShowGaps == false)
            {
                <AudioBox TestSpec="@testSpec"
                        Screen="@screenA" />
            }

            <PlayAB TestSpec = "@testSpec"
                    Screen="@screenA"
                    Callback="ProcessCallback" />

            @foreach (Blow blow in blowSetB.Blows)
            {
                if (testSpec.ShowGaps == true)
                {
                    // Place labels if it's the first blow of the row
                    if (blow.Place == 1)
                    {
                        <RowStartLabel TestSpec="@testSpec"
                                Blow="@blow"
                                Screen="@screenB" />
                    }

                    <Bell TestSpec="@testSpec"
                            Blow="@blow"
                            Screen="@screenB"
                            Callback="ProcessCallback" />
                }

                <audio id="@blow.AudioId" preload="auto">
                    <source src="@blow.BellSound" type="audio/mpeg" />
                </audio>
            }

            if (testSpec.ShowGaps == false)
            {
                <AudioBox TestSpec="@testSpec"
                        Screen="@screenB" />
            }

            <PlayAB TestSpec="@testSpec"
                    Screen="@screenB"
                    Callback="ProcessCallback" />

            <SubmitAB TestSpec="@testSpec"
                    Screen="@screenB"
                    Callback="ProcessCallback" />
        }
    </div>
</div>
