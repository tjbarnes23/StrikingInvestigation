@page "/GapTest"
@using StrikingInvestigation.Models
@using StrikingInvestigation.Utilities

<div class="container mx-0 mx-md-2 my-1 my-md-3">
    <div style="float: right">(@browserWidth, @browserHeight)</div>

    <h1>Gap Test</h1>

    <p>Adjust the test bell until you think it is striking at the correct time.</p>

    @if (gapTestsData == null)
    {
        <div class="spinner"></div>
    }
    else
    {
        <EditForm Model="@gapTestsData">
            <div style="display: inline-block">
                <div class="form-group">
                    <label>
                        Select Test
                    </label>

                    <CustomInputSelect Value="@screen.SelectedTest"
                                       ValueChanged="@( (int value) => TestChanged(value) )"
                                       ValueExpression="@( () => screen.SelectedTest )"
                                       class="form-control"
                                       disabled="@screen.ControlsDisabled">
                        <option value="-1">Select test...</option>
                        <option value="0">Practice</option>

                        @foreach (GapTestData gapTestData in gapTestsData)
                        {
                            <option value="@gapTestData.Id">Test @gapTestData.Id</option>
                        }
                    </CustomInputSelect>
                </div>
            </div>
        </EditForm>

        @if (screen.SelectedTest == 0)
        {
            <EditForm Model="@testSpec">
                <div style="display: inline-block">
                    <div class="form-group">
                        <label>
                            Stage
                        </label>

                        <CustomInputSelect Value="@testSpec.Stage"
                                           ValueChanged="@( (int value) => StageChanged(value) )"
                                           ValueExpression="@( () => testSpec.Stage )"
                                           class="form-control"
                                           disabled="@screen.ControlsDisabled">
                            @for (int i = 5; i <= 12; i++)
                            {
                                <option value="@i">@StageConv.StageStr(i)</option>
                            }
                        </CustomInputSelect>
                    </div>
                </div>

                <div style="display: inline-block">
                    <div class="form-group">
                        <label>
                            Tenor weight
                        </label>

                        <CustomInputSelect Value="@testSpec.TenorWeight"
                                           ValueChanged="@( (int value) => TenorWeightChanged(value) )"
                                           ValueExpression="@( () => testSpec.TenorWeight )"
                                           class="form-control"
                                           disabled="@screen.TenorWeightDisabled">
                            <option value="8">@TenorWeightConv.TenorWeightStr(8)</option>
                            <option value="23">@TenorWeightConv.TenorWeightStr(23)</option>
                        </CustomInputSelect>
                    </div>
                </div>

                <div style="display: inline-block">
                    <div class="form-group">
                        <label>
                            Number of rows
                        </label>

                        <CustomInputSelect Value="@testSpec.NumRows"
                                           ValueChanged="@( (int value) => NumRowsChanged(value) )"
                                           ValueExpression="@( () => testSpec.NumRows )"
                                           class="form-control"
                                           disabled="@screen.ControlsDisabled">
                            @for (int i = 2; i <= 8; i++)
                            {
                                <option value="@i">@i</option>
                            }
                        </CustomInputSelect>
                    </div>
                </div>

                <div style="display: inline-block">
                    <div class="form-group">
                        <label>
                            Max error size
                        </label>

                        <CustomInputSelect Value="@testSpec.ErrorSize"
                                           ValueChanged="@( (int value) => ErrorSizeChanged(value) )"
                                           ValueExpression="@( () => testSpec.ErrorSize )"
                                           class="form-control"
                                           disabled="@screen.ControlsDisabled">
                            @for (int i = 100; i >= 0; i -= 10)
                            {
                                <option value="@i">@ErrorSizeConv.ErrorSizeStr(i)</option>
                            }
                        </CustomInputSelect>
                    </div>
                </div>

                <div style="display: inline-block">
                    <div class="form-group">
                        <label>
                            Test bell location
                        </label>

                        <CustomInputSelect Value="@testSpec.TestBellLoc"
                                           ValueChanged="@( (int value) => TestBellLocChanged(value) )"
                                           ValueExpression="@( () => testSpec.TestBellLoc )"
                                           class="form-control"
                                           disabled="@screen.ControlsDisabled">
                            @for (int i = 1; i <= 2; i++)
                            {
                                <option value="@i">@TestBellLocConv.TestBellLocStr(i)</option>
                            }
                        </CustomInputSelect>
                    </div>
                </div>

                <div style="display: inline-block">
                    <button class="btn btn-primary" @onclick="Create" disabled="@screen.ControlsDisabled">
                        Create Gap Test
                    </button>
                </div>
            </EditForm>
            
            @if (blowSet != null)
            {
                <EditForm Model="@screen">
                    <div style="display: inline-block">
                        <div class="form-group">
                            <label>
                                Show gap times
                            </label>

                            <InputCheckbox Value="@screen.ShowGaps"
                                            ValueChanged="@( (bool value) => ShowGapsChanged(value) )"
                                            ValueExpression="@( () => screen.ShowGaps )"
                                            class="form-control"
                                            disabled="@screen.ControlsDisabled" />
                        </div>
                    </div>
                </EditForm>

                <div style="display: inline-block">
                    <div class="form-group">
                        <label>
                            Save test
                        </label>

                        <button class="btn btn-primary" @onclick="Save" disabled="@screen.ControlsDisabled">
                            @screen.SaveLabel
                        </button>

                        @if (screen.SpinnerSaving == true)
                        {
                            <div class="spinnerinline" style="display: inline-block; vertical-align: top;
                                    margin-left: 12px; margin-top: 7px;
                                    --borderwidth: 5px; --width: 24px; --height: 24px">
                            </div>
                        }

                        @if (screen.Saved == true)
                        {
                            <div style="display: inline-block; vertical-align: top; margin-left: 12px;
                                    margin-top: 7px">
                                Saved
                            </div>
                        }
                    </div>
                </div>
            }
        }
        else if (screen.SelectedTest != -1)
        {
            <div>
                <div style="display: inline-block">
                    <div class="form-group">
                        <label>
                            Stage
                        </label>

                        <div style="border: 1px solid #ced4da; border-radius: 4px; padding-left: 16px; padding-top: 7px">
                            <label>
                                @StageConv.StageStr(testSpec.Stage)
                            </label>
                        </div>
                    </div>
                </div>

                <div style="display: inline-block">
                    <div class="form-group">
                        <label>
                            Tenor weight
                        </label>

                        <div style="border: 1px solid #ced4da; border-radius: 4px; padding-left: 16px; padding-top: 7px">
                            <label>
                                @TenorWeightConv.TenorWeightStr(testSpec.TenorWeight)
                            </label>
                        </div>
                    </div>
                </div>

                <div style="display: inline-block">
                    <div class="form-group">
                        <label>
                            Number of rows
                        </label>

                        <div style="border: 1px solid #ced4da; border-radius: 4px; padding-left: 16px; padding-top: 7px">
                            <label>
                                @testSpec.NumRows
                            </label>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
</div>

<div style="position: relative" tabindex="0" @onkeydown="ArrowKeys" @ref="mainDiv">
    @if (blowSet != null)
    {
        @foreach (Blow blow in blowSet.Blows)
        {
            // Place labels if it's the first blow of the row
            if (blow.Place == 1)
            {
                <StartOfRowLabel Blow="@blow"
                                Screen="@screen" />
            }
            
            <Bell Blow="@blow"
                    Screen="@screen"
                    Callback="ProcessCallback" />

            <audio id="@blow.AudioId" preload="auto">
                <source src="@blow.BellSound" type="audio/mpeg" />
            </audio>
        }

        <ControlSet Blow="@blowSet.Blows.Last()"
                Screen="@screen"
                Callback="ProcessCallback" />
    }
</div>
