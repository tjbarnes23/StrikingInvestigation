@page "/AVTest"
@using StrikingInvestigation.Models
@using StrikingInvestigation.Utilities

<div class="container mx-0 mx-md-2 my-1 my-md-3">
    <div style="float: right">(@browserWidth, @browserHeight)</div>
    
    <h1>A/V Test</h1>

    <p>Adjust the test bell until it strikes at the same time that it changes color.</p>

    @if (aVTestsData == null)
    {
        <div class="spinner"></div>
    }
    else
    {
        <EditForm Model="@aVTestsData">
            <div style="display: inline-block">
                <div class="form-group">
                    <label>
                        Select Test
                    </label>

                    <CustomInputSelect Value="screen.SelectedTest"
                                       ValueChanged="@( (int value) => TestChanged(value) )"
                                       ValueExpression="@( () => screen.SelectedTest )"
                                       class="form-control"
                                       disabled="@screen.ControlsDisabled">
                        <option value="-1">Select test...</option>
                        <option value="0">Practice</option>

                        @foreach (AVTestData aVTestData in aVTestsData)
                        {
                            <option value="@aVTestData.Id">Test @aVTestData.Id</option>
                        }
                    </CustomInputSelect>
                </div>
            </div>
        </EditForm>

        @if (screen.SelectedTest == 0)
        {
            <EditForm Model="@screen.ShowGaps">
                <div style="display: inline-block">
                    <button class="btn btn-primary" @onclick="Create" disabled="@screen.ControlsDisabled">
                        Create A/V Test
                    </button>
                </div>

                @if (blow != null)
                {
                    <div style="display: inline-block">
                        <div class="form-group">
                            <label>
                                Show audio gap time
                            </label>

                            <InputCheckbox Value="@screen.ShowGaps"
                                           ValueChanged="@( (bool value) => ShowGapsChanged(value) )"
                                           ValueExpression="@( () => screen.ShowGaps )"
                                           class="form-control"
                                           disabled="@screen.ControlsDisabled" />
                        </div>
                    </div>

                    <div style="display: inline-block">
                        <div class="form-group">
                            <label>
                                Save test
                            </label>

                            <button class="btn btn-primary" @onclick="Save" disabled="@screen.ControlsDisabled">
                                @screen.SaveLabel
                            </button>

                            @if (screen.SpinnerSaving == true)
                            {
                                <div class="spinnerinline" style="display: inline-block; vertical-align: top;
                                margin-left: 12px; margin-top: 7px;
                                --borderwidth: 5px; --width: 24px; --height: 24px">
                                </div>
                            }

                            @if (screen.Saved == true)
                            {
                                <div style="display: inline-block; vertical-align: top; margin-left: 12px;
                                margin-top: 7px">
                                    Saved
                                </div>
                            }
                        </div>
                    </div>
                }
            </EditForm>
        }
    }
</div>

<div style="position: relative" tabindex="0" @onkeydown="ArrowKeys" @ref="mainDiv">
    @if (blow != null)
    {
        <Bell Blow="@blow"
                Screen="@screen"
                Callback="ProcessCallback" />

        <audio id="@blow.AudioId" preload="auto">
            <source src="@blow.BellSound" type="audio/mpeg" />
        </audio>

        <ControlSet Blow="@blow"
                Screen="@screen"
                Callback="ProcessCallback" />
    }
</div>
