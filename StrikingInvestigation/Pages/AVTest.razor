@page "/AVTest"
@using StrikingInvestigation.Models
@using StrikingInvestigation.Utilities

<div class="posabs" style="--leftpos: 20px; --toppos: 63px">
    <h1>A/V Test</h1>
</div>

<div class="posabs" style="--leftpos: 20px; --toppos: 113px">
    <p>Adjust the test bell until it strikes at the same time that it changes color.</p>
</div>

@if (AVTestsData == null)
{
    <div class="spinner"></div>
}
else
{
    <div class="form-group">
        <EditForm Model="@AVTestsData">
            <div class="posabs" style="--leftpos: 20px; --toppos: 163px">
                <label>
                    Select Test
                </label>
            </div>

            <CustomInputSelect Value="@SelectedTest"
                    ValueChanged="@( (int value) => TestChanged(value) )"
                    ValueExpression="@( () => SelectedTest )"
                    class="form-control posabsw"
                    style="--leftpos: 110px; --toppos: 156px; --width: 200px"
                    disabled="@ControlsDisabled">
                <option value="-1">Select test...</option>
                <option value="0">Practice</option>

                @foreach (AVTestData aVTestData in AVTestsData)
                {
                    <option value="@aVTestData.Id">Test @aVTestData.Id</option>
                }
            </CustomInputSelect>
        </EditForm>
    </div>

    @if (SelectedTest == 0)
    {
        <div class="form-group">
            <EditForm Model="@ShowGaps">
                <div class="posabs" style="--leftpos: 20px; --toppos: 241px">
                    <button class="btn btn-primary" @onclick="Create" disabled="@ControlsDisabled">
                        Create A/V Test
                    </button>
                </div>

                @if (Blow != null)
                {
                    <div class="posabs" style="--leftpos: 180px; --toppos: 213px">
                        <label>
                            Show audio gap time
                        </label>
                    </div>

                    <InputCheckbox Value="@ShowGaps"
                        ValueChanged="@( (bool value) => ShowGapsChanged(value) )"
                        ValueExpression="@( () => ShowGaps )"
                        class="form-control posabswh"
                        style="--leftpos: 242px; --toppos: 251px; --width: 20px; --height: 20px"
                        disabled="@ControlsDisabled" />

                    <div class="posabs" style="--leftpos: 350px; --toppos: 213px">
                        <label>
                            Save test
                        </label>
                    </div>

                    <div class="posabs" style="--leftpos: 350px; --toppos: 241px">
                        <button class="btn btn-primary" @onclick="Save" disabled="@ControlsDisabled">
                            @SaveLabel
                        </button>

                        @if (Spinner1 == true)
                        {
                            <div class="spinnerinline" style="display: inline-block; vertical-align: top;
                                    margin-left: 12px; margin-top: 7px;
                                    --borderwidth: 5px; --width: 24px; --height: 24px">
                            </div>
                        }

                        @if (Saved == true)
                        {
                            <div style="display: inline-block; vertical-align: top; margin-left: 12px;
                                    margin-top: 7px">
                                Saved
                            </div>
                        }
                    </div>
                }
            </EditForm>
        </div>
    }
}

<div tabindex="0" @onkeydown="ArrowKeys" @ref="mainDiv">
    @if (Blow != null)
    {
        <div @onmousedown="TestBellMouseDown" @onmousemove="TestBellMouseMove">
            <Bell Blow="@Blow"
                    Screen="@Screen" />
        </div>

        @if (ShowGaps == true)
        {
            <GapAudioLabel Blow="@Blow"
                    Screen="@Screen" />
        }

        <audio id="@Blow.AudioId" preload="auto">
            <source src="@Blow.BellSound" type="audio/mpeg" />
        </audio>

        <BoundaryLabel Blow="@Blow"
                       Screen="@Screen" />

        <GapMinus Blow="@Blow"
                  Screen="@Screen"
                  GapDisabled="@ControlsDisabled"
                  Callback="GapChangedWithButton" />

        <GapCurr Blow="@Blow"
                 Screen="@Screen" />

        <GapPlus Blow="@Blow"
                 Screen="@Screen"
                 GapDisabled="@ControlsDisabled"
                 Callback="GapChangedWithButton" />

        <PlayBtn Blow="@Blow"
                 Screen="@Screen"
                 PlayLabel="@PlayLabel"
                 PlayDisabled="@PlayDisabled"
                 Callback="Play" />

        @if (Spinner2 == true)
        {
            <SpinnerPlay Blow="@Blow"
                    Screen="@Screen" />
        }

        @if (SelectedTest != 0 && SelectedTest != -1)
        {
            <SubmitBtn Blow="@Blow"
                    Screen="@Screen"
                    SubmitLabel="@SubmitLabel"
                    SubmitDisabled="@ControlsDisabled"
                    Callback="Submit" />
        }

        @if (SpinnerSubmit == true)
        {
            <SpinnerSubmit Blow="@Blow"
                    Screen="@Screen" />
        }

        @if (Submitted == true)
        {
            <SubmitLabel Blow="@Blow"
                    Screen="@Screen" />
        }
    }
</div>
